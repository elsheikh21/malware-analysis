from sklearn.svm import SVC
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import BernoulliNB
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (accuracy_score, confusion_matrix, precision_score,
                             recall_score, f1_score)


def print_metrices_out(y_predicted, y_test):
    print("Accuracy is %f (in percentage)" %
          (accuracy_score(y_test, y_predicted) * 100))
    print("Confusion Matrix: " + str(confusion_matrix(y_test, y_predicted)))
    print("Recall score is %f." % recall_score(y_test, y_predicted))
    print("Precision score is %f." %
          precision_score(y_test, y_predicted))
    print("F1 score is %f." % f1_score(y_test, y_predicted))
    print("-----------------------------------\n")


def train_svm(x_train, y_train, x_test, y_test):
    print("-------------SVM Model-------------")
    model = SVC(gamma='scale')
    # SVM Fit
    model.fit(x_train, y_train)
    # SVM Predict
    y_predicted = model.predict(x_test)
    print("SVM Evaluation parameters:")
    print_metrices_out(y_predicted, y_test)


def train_recursive_feature_elimination(x_train, y_train, x_test, y_test):
    print("-------------RFE Model-------------")
    model = LogisticRegression(solver='lbfgs')
    rfe = RFE(model, 4)
    # SVM Fit
    rfe.fit(x_train, y_train)
    # SVM Predict
    y_predicted = rfe.predict(x_test)
    print_metrices_out(y_predicted, y_test)


def train_extra_trees(x_train, y_train, x_test, y_test):
    print("-------------Extra Trees Model-------------")
    extra_trees = ExtraTreesClassifier(n_estimators=100)
    # ET Fit
    extra_trees.fit(x_train, y_train)
    # ET Predict
    y_predicted = extra_trees.predict(x_test)
    # ET Matrices
    print("ET Evaluation parameters:")
    print_metrices_out(y_predicted, y_test)


def train_rf(x_train, y_train, x_test, y_test):
    print("-------------RF Model-------------")
    model = RandomForestClassifier(n_estimators=100)
    # SVM Fit
    model.fit(x_train, y_train)
    # RF Predict
    y_predicted = model.predict(x_test)
    # RF Matrices
    print("RF Evaluation parameters:")
    print_metrices_out(y_predicted, y_test)


def train_naive_bayes(x_train, y_train, x_test, y_test):
    print("-------------NB Model-------------")
    bern_naive_bayes = BernoulliNB()
    # NB Fit
    bern_naive_bayes.fit(x_train, y_train)
    # NB Predict
    y_predicted = bern_naive_bayes.predict(x_test)
    # NB Matrices
    print("NB Evaluation parameters:")
    print_metrices_out(y_predicted, y_test)

'''
Building a malware analysis tool, based on automatic feature selection
Automatic Feature Selection: automatic feature weighting and selection
based on statistical properties of the training set, where features
are ranked based upon their significance.
'''
import features_selection
import read_dataset
from sklearn.model_selection import train_test_split
import train


# reads dataset, classify content {malware|not malware}
# returns x = {file|features' occurrences} and y = {labels}
x, y = read_dataset.read_data()

# select features from the already classified dataset
# to be used to train our model
print('\nFeatures Selection based on KBest: ')
features_selection.select_features_k_best(x, y)

print('\nFeatures Selection based on Recursive Features Elimination: ')
features_selection.select_features_recursive_feature_elimination(x, y)

print('\nFeatures Selection based on Extra trees classifier: ')
features_selection.select_features_extra_trees(x, y)

print('\nFeatures Selection based on Random Forest classifier: ')
features_selection.select_features_random_forest(x, y)

# Split data into training and testing sets of 80% - 20%
x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, random_state=42)

print('\nTraining data shape (x, y): ' +
      str(x_train.shape), str(y_train.shape))

print('\nTesting data shape (x, y): ' +
      str(x_test.shape), str(y_test.shape))


# Training with different models (SVM, Recursive Feature Elimination,
# Random Forest, Extra Trees, naive Bayes)
train.train_svm(x_train, y_train, x_test, y_test)
train.train_extra_trees(x_train, y_train, x_test, y_test)
train.train_recursive_feature_elimination(x_train, y_train, x_test, y_test)
train.train_rf(x_train, y_train, x_test, y_test)
train.train_naive_bayes(x_train, y_train, x_test, y_test)
